




\documentclass[11pt, a4paper]{article}

%MUST DOWNLOAD algorithm.sty
\usepackage{algorithm} 
%\usepackage{algorithmicx}
\usepackage{algpseudocode}
\usepackage{empheq}
\usepackage{euscript}
\usepackage{amsmath}
\usepackage{amsthm}
\usepackage{amssymb}
\usepackage{epsfig}
\usepackage{xspace}
\usepackage{color}
\usepackage{url}

%\usepackage{algpseudocode}

\usepackage{mathtools}
\DeclarePairedDelimiter\ceil{\lceil}{\rceil}
\DeclarePairedDelimiter\floor{\lfloor}{\rfloor}

%%%%%%%  For drawing trees  %%%%%%%%%
\usepackage{tikz}
\usetikzlibrary{calc, shapes, backgrounds}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\setlength{\textheight}{9in}
\setlength{\topmargin}{-0.600in}
\setlength{\headheight}{0.2in}
\setlength{\headsep}{0.250in}
\setlength{\footskip}{0.5in}
\flushbottom
\setlength{\textwidth}{6.5in}
\setlength{\oddsidemargin}{0in}
\setlength{\evensidemargin}{0in}
\setlength{\columnsep}{2pc}
\setlength{\parindent}{1em}
\setlength\fboxsep{1cm}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


\newcommand{\eps}{\varepsilon}

\renewcommand{\c}[1]{\ensuremath{\EuScript{#1}}}
\renewcommand{\b}[1]{\ensuremath{\mathbb{#1}}}
\newcommand{\s}[1]{\textsf{#1}}
\newcommand*\widefbox[1]{\fbox{\hspace{2em}#1\hspace{2em}}}
\newcommand{\E}{\textbf{\textsf{E}}}
\renewcommand{\Pr}{\textbf{\textsf{Pr}}}
\renewcommand{\labelenumi}{(\alph{enumi}) }


%%%
%%%  Header
%%%

\begin{document}
\begin{center}
    {\Large Topology of Musical Compositions}\\
  {\large Computational Topology}\hfill {\large CS6170}\\
  Zahra Fahimfar \hfill uNID: u0900547\\
  Samuel Leventhal\hfill  uNID: u0491567\\
\end{center}



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%                                              %%%%%
%%%%       Reference of Latex functionalities     %%%%%
%%%%                                              %%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\iffalse

%
% Image
%
\begin{figure}[H]
\centering{
\includegraphics[width=.8\linewidth]{problem1plot.png}
}
\label{fig:prob1fig}
\end{figure}

%
% Matrix
%
\[ \begin{pmatrix}
  4 & 1 \\
  0 & 4 \\
\end{pmatrix}\]

%
% Algorithm
%
  \begin{algorithm}[H]
\caption{Matrix Inversion by LU decomposition}
\begin{algorithmic}
  \For{$k = 1:n$}
      \For{$i=1:n$}
          \If{$i\neq k$}
              \State $l_{ik} \leftarrow \frac{A_{ik}}{A_{kk}}$ \Comment{(n-1)}
                    \For{$j=k+1 : 2n$}
                        \State $A_{ij} \leftarrow A_{ij} - l_{ik}A_{kj}$ \Comment{2(n-1)(2n-k)}
                    \EndFor
                    \EndIf
                    \For{$j=2n:k$}
                    \State $A_{kj} \leftarrow \frac{A_{kj}}{A_{kk}}$ \Comment{2n-k+1}
                    \EndFor
      \EndFor
  \EndFor
\end{algorithmic}
\end{algorithm}

%
% Another matrix
%
  \[
  \begin{smallmatrix}
    1 & 1 & 1 & \cdots & 1 & 2 & 3 & 4 & \cdots & n & 2 & 3 & \cdots &n\\
    1 & 2 & 3 & \cdots & n & 1 & 1 & 1 & \cdots & 1 & 2 & 3 & \cdots & n\\
    c_{1,1} & c_{1,2} & c_{1,3} & \cdots & c_{1,n} & c_{2,1} & c_{3,1} & c_{4,1} & \cdots & c_{n,1} & c_{2,2} & c_33 &\cdots &c_nn\\
  \end{smallmatrix}
\]

%
% bounding box
%
\noindent\fbox{
  \parbox{.8\textwidth}{

  }
}



\fi
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\section*{Project Proposal: Topology of Musical Compositions}


\begin{enumerate}
  

\item  Project overview (i.e. introduction, motivation, project description, high-level goal, etc.)
  

\item Intellectual merit (i.e. the highlighted contribution of the proposed work)

  Current methods for song correlations are done based on user data, musical ``equivilance'' is then based on association to common songs shared between users. The proposed method here however is completely independent of clustering of songs based on user groupings or ``genre'' but instead correlates the implicit compositions and structure. A topologically based learning algorithm as proposed here allows new means of studying music theory and novel approach to music classification.  

\item Technical details (i.e. strategies/algorithms/techniques to be developed to address the proposed problem)
  \begin{itemize}
  \item \textbf{Methodology:}
    Our goal is to represent musical data in a form which allows us to extrapolate topological attributes unique to each song. These topological attributes, be it homologies or manifold structures, would then afford features to construct a novel means of song classification.

    $\ \ \ \ $ Our approach will then first (1) construct a data structure based on song data such as an associated matrix with weights or a point cloud in euclidean space followed by (2) using persistent homology or manifold modeling to extrapolate features to be used in (3) a machine learning approach to classify musical compositions as similar.
    
    \iffalse
    -intersection theory
    \fi
  \item \textbf{Data Structure:}
    \begin{itemize}
    \item \textit{Graph Representation:}  Each node corresponds to a pitch occuring in a musical peice along with the starting and stopping time of that pitch, specifically\\ $ \{ pitch, (t_{start(pitch)}, t_{stop(pitch)}) \} $. Edges of the graph correspond to nodes which are sequential. Each edge then correlates to pitches within a song which are consecutive. Weights could also be added to edges and valued proportional to the number of occured sequential pairing. The larger the edge weight the more common than a series of pitches is.

    \item \textit{Matrix Construction:} Element $t_{i,j}$ of matrix $T$ implies pitch $i$ occurs before and is directly followed by pitch $j$. The rows and columns of $T$ correspond to observed pitches within the song. Element $t_{ij}$ contains the start and stop times of the consecutive pitches $i$ and $j$ as they have occured throughout the song, specifically $\{[ (t^1_{start(i)}, t^1_{stop(i)}), \cdots ,t^m_{start(i)}, t^m_{stop(i)})]  , [(t^1_{start(j)}, , \cdots , t^m_{stop(j)})] \}$ and imply pitch identified to row $i$ occurs at $t^{\ell}_{start(i)}$ and lasts for  $ t^{\ell}_{stop(i)} - t^{\ell}_{start(i)}$ for each $\ell$ such that $1\leq \ell \leq m$ where $m$ is the total number of times pitch $i$ preceeds pitch $j$ identified with column $j$ and beginning at $t^{\ell}_{start(j)}$ and lasting for $t^{\ell}_{stop(j)} - t^{\ell}_{start(j)}$.

  \item \textit{Coordinate Mapping:} Two options are available for a coordinate representation. The first would be to take the matrix representation discussed above and translating it into a graphical representation. The second would be to plot each pitch directly into $\mathbb{R}^3$ where the coordinate $(x,y,z)$ is defined to be $(start\ time, stop\ time, pitch)$. 
    

    \item \textit{Image Encoding:}
    \end{itemize}
  \item Topologocal data analysis technique:

    Persistent Homology:

    Two techniques are available for an approach based on persistent homology. Depending on which method we choose to represent the data. Regardless of whether we choose to use a matrix representation which is then translated into a point cloud or directly plot our data as a point cloud the use of persistent homology will achieve the same goal. Persistent homology will allow us to extrapolate reoccurent musical structures dependent on scale. If we are to consider our data as pitch, time of being played, and stop time then through persistence we will be able to identify homological features between points who are near, or distant, in pitch as well as in time. For example, figure \ref{fig:persMusic} demonstrates two a repeated sequence of pitches which repeats at $t$ and $t^*$ at two different stages of persistence shown in red and blue. From the two stages of persistence shown in figure \ref{fig:persMusic} we can see that the time at which homological features or identified are able to tell us how near pitches occur to each other in time as well as how similar they are in pitch form homological features of dimension 1 sooner, whereas those more distant in pitch and perhaps near in time (such as $p_1$ and $p_2$), or more distant in time but near in pitch would form loop structures later during persistence. We then aim to show that these homological features and the time with which they are born/die during persistence can both be trained on using various machine learning approaches, allowing us to classify music as similar based on attributes found from persistence.
    \begin{center}
      \begin{figure}[H]
        \label{fig:persMusic}
        \centering{
          \includegraphics[width=.8\linewidth]{musicPersistence.png}
        }
        \label{fig:persMusic}
        \caption{Two levels of persistence for musical data}
        \label{fig:persMusic}
      \end{figure}
    \end{center}
    
    Manifold Modeling:
    
    Can use manifold modeling approach such as \textit{isomap} which computes piecewise linear approximation to geodesic distance through the construction of a nearest neighbor graph using the metric of some ``ambient space'' that the manifold of musical data is assumed to belong to belongs to allowing us to say the geodesic distances between nearby samples can be accurately approximated by the distances in the ambient space, meaning there exists a local metric (as demanded by the definition a manifold). Using this metric multidimensional scaling on the pairwise approximate geodesic distances yields a distance preserving $d$-dimensional Euclidean configuration of points. Isomap could then provide a discrete mapping $z_i = f(y_i)$ defined only on the original input samples of pitch relation matrices defined as $S_y = \{y_1,\cdots , y_n \} \in \mathcal{A}$.

 $  \ \ \ \ $ The next step would then be to use the parameterization and coordinate mapping $f$ given by isomap for the construction of a generative manifold model. The  song  matrix data  $S_y$ are considered samples from a random variable $Y$ with an arbitrary density $p(y)$ defined on $\mathcal{A}$. We can then consider the coordinate mapping yielded from isomap  $f:\mathcal{A} \rightarrow \mathcal{C}$ as representing a $d-$dimensional parameterization of $\mathcal{A}$ where each point on the manifold represents the average over all song matrices with the same parameter $f(Y)$.  We can then apply a conditional expectation $g(x) = E[Y-f(y) = x])$ to represent an explicit manifold representation. The conditional expectation $g(x)$, estimated by manifold kernel regression, is then summarised as a manifold representation of from the original song data by the opporater $\phi (\cdot ) = g\circ f$. In summary we are then  modeling the coordinate mapping $f$ onto the complete ambient space as a kernel regression on the discrete $z_i = f(y_i)$ done in by first (1) computing $S_z = \{ z_1, \cdots , z_n \}$ by isomap on $S_y$ then (2) building the generative manifold model with (a) the coordinate mapping $f$ by the kernel regression over $S_z$ and (b) the explicit manifild representation $g(x) = E[Y-f(Y)=x] $ estimated by manifold kernel regression.
    
  \end{itemize}
\item Expected outcome and potential impact (i.e. the expected results of the project, please be realistic, the final project is due early May). 

\end{enumerate}

Please submit the 1-page proposal in PDF together with a Zip file that contains the LATEX sources. 

If your team consists of more than 1 person, each of the team members should submit the proposal individually. 

The final project proposal is going to be 10 points towards your final grade. 

\end{document}
%%% Local Variables:
%%% mode: latex
%%% TeX-master: t
%%% End:
